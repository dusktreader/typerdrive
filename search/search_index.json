{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#typerdrive","title":"typerdrive","text":"<p>Boost your command-line workflows to lightspeed</p>"},{"location":"#overview","title":"Overview","text":"<p>This Python package adds extended functionality for Typer CLIs.</p> <p>Many features are planned, but these are the ones that are available thus far:</p> <ul> <li>Settings management &amp; commands</li> <li>Cache management &amp; commands</li> <li>Logging management &amp; commands</li> <li>User-friendly error handling</li> <li>Powered Up API clients</li> </ul>"},{"location":"demo/","title":"Demo","text":"<p>The <code>typerdrive</code> package includes an \"extra\" that can be installed to show all its features. Each demo focuses on a particular feature and runs a few examples that demonstrate how the feature can be used in your CLI app.</p>"},{"location":"demo/#installation","title":"Installation","text":"<p>To install the <code>demo</code> with <code>typerdrive</code> you need to supply it as an \"extra\" when installing <code>typerdrive</code>. The following command can be used:</p> <pre><code>pip install typerdrive[demo]\n</code></pre>"},{"location":"demo/#running-the-demo","title":"Running the demo","text":"<p>An entrypoint for the demo is included when it is installed. Simply run:</p> <pre><code>typerdrive-demo\n</code></pre> <p>If you provide no arguments, it will run all available demos. If you wish to only see the demos for a particular feature, you can use the <code>--feature=&lt;feature&gt;</code> option to target one feature.</p> <p>To see all available options, run:</p> <pre><code>typerdrive-demo --help\n</code></pre>"},{"location":"demo/#running-the-demo-in-an-isolated-environment-with-uv","title":"Running the demo in an isolated environment with uv","text":"<p>If you want to run the demo but not include its dependencies in your system python or an activated virtual environment, you can execute the demo with uv:</p> <pre><code>uvx --from=typerdrive[demo] typerdrive-demo\n</code></pre>"},{"location":"demo/#check-out-the-source","title":"Check out the source","text":"<p>You can also examine the demo source to examine how <code>typerdrive</code> is used.</p> <p>Check out the source code on Github.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>Python 3.12 to 3.13</li> </ul>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#install-from-pypi","title":"Install from pypi:","text":"<p>This will install the latest release from pypi via pip:</p> <pre><code>pip install typerdrive\n</code></pre> <p>To include the runnable demo, you need to include the <code>demo</code> extra:</p> <pre><code>pip install typerdrive[demo]\n</code></pre>"},{"location":"reference/","title":"typerdrive Reference","text":""},{"location":"reference/#typerdrive.cloaked","title":"typerdrive.cloaked","text":""},{"location":"reference/#typerdrive.cloaked.CloakingDevice","title":"CloakingDevice  <code>module-attribute</code>","text":"<pre><code>CloakingDevice = Option(\n    parser=lambda _: _,\n    hidden=True,\n    expose_value=False,\n    default_factory=lambda: None,\n)\n</code></pre>"},{"location":"reference/#typerdrive.config","title":"typerdrive.config","text":""},{"location":"reference/#typerdrive.config.TyperdriveConfig","title":"TyperdriveConfig","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.app_name","title":"app_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>app_name: str = split('/')[-1]\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.cache_dir","title":"cache_dir  <code>property</code>","text":"<pre><code>cache_dir: Path\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.log_dir","title":"log_dir  <code>property</code>","text":"<pre><code>log_dir: Path\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.log_file_compression","title":"log_file_compression  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_file_compression: FileCompressionSpec = 'tar.gz'\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.log_file_name","title":"log_file_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_file_name: str = 'app.log'\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.log_file_retention","title":"log_file_retention  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_file_retention: FileRetentionSpec = '1 month'\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.log_file_rotation","title":"log_file_rotation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_file_rotation: FileRotationSpec = '1 week'\n</code></pre>"},{"location":"reference/#typerdrive.config.TyperdriveConfig.settings_path","title":"settings_path  <code>property</code>","text":"<pre><code>settings_path: Path\n</code></pre>"},{"location":"reference/#typerdrive.config.get_typerdrive_config","title":"get_typerdrive_config","text":"<pre><code>get_typerdrive_config() -&gt; TyperdriveConfig\n</code></pre>"},{"location":"reference/#typerdrive.config.set_typerdrive_config","title":"set_typerdrive_config","text":"<pre><code>set_typerdrive_config(**kwargs: Any)\n</code></pre>"},{"location":"reference/#typerdrive.constants","title":"typerdrive.constants","text":""},{"location":"reference/#typerdrive.constants.ExitCode","title":"ExitCode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Maps exit codes for the application.</p>"},{"location":"reference/#typerdrive.constants.ExitCode.CANNOT_EXECUTE","title":"CANNOT_EXECUTE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CANNOT_EXECUTE = 126\n</code></pre>"},{"location":"reference/#typerdrive.constants.ExitCode.GENERAL_ERROR","title":"GENERAL_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GENERAL_ERROR = 1\n</code></pre>"},{"location":"reference/#typerdrive.constants.ExitCode.INTERNAL_ERROR","title":"INTERNAL_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INTERNAL_ERROR = 128\n</code></pre>"},{"location":"reference/#typerdrive.constants.ExitCode.SUCCESS","title":"SUCCESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUCCESS = 0\n</code></pre>"},{"location":"reference/#typerdrive.constants.Validation","title":"Validation","text":"<p>               Bases: <code>Flag</code></p> <p>Defines whether validation should happen \"before\", \"after\", \"both\", or \"none\"</p>"},{"location":"reference/#typerdrive.constants.Validation.AFTER","title":"AFTER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AFTER = auto()\n</code></pre>"},{"location":"reference/#typerdrive.constants.Validation.BEFORE","title":"BEFORE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BEFORE = auto()\n</code></pre>"},{"location":"reference/#typerdrive.constants.Validation.BOTH","title":"BOTH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOTH = BEFORE | AFTER\n</code></pre>"},{"location":"reference/#typerdrive.constants.Validation.NONE","title":"NONE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NONE = 0\n</code></pre>"},{"location":"reference/#typerdrive.context","title":"typerdrive.context","text":""},{"location":"reference/#typerdrive.context.TyperdriveContext","title":"TyperdriveContext  <code>dataclass</code>","text":""},{"location":"reference/#typerdrive.context.TyperdriveContext.cache_manager","title":"cache_manager  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cache_manager: CacheManager | None = None\n</code></pre>"},{"location":"reference/#typerdrive.context.TyperdriveContext.client_manager","title":"client_manager  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_manager: ClientManager | None = None\n</code></pre>"},{"location":"reference/#typerdrive.context.TyperdriveContext.logging_manager","title":"logging_manager  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logging_manager: LoggingManager | None = None\n</code></pre>"},{"location":"reference/#typerdrive.context.TyperdriveContext.settings_manager","title":"settings_manager  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>settings_manager: SettingsManager | None = None\n</code></pre>"},{"location":"reference/#typerdrive.context.TyperdriveContext.__init__","title":"__init__","text":"<pre><code>__init__(\n    settings_manager: SettingsManager | None = None,\n    cache_manager: CacheManager | None = None,\n    client_manager: ClientManager | None = None,\n    logging_manager: LoggingManager | None = None,\n) -&gt; None\n</code></pre>"},{"location":"reference/#typerdrive.context.from_context","title":"from_context","text":"<pre><code>from_context(ctx: Context, name: str) -&gt; TyperdriveManager\n</code></pre>"},{"location":"reference/#typerdrive.context.get_user_context","title":"get_user_context","text":"<pre><code>get_user_context(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.context.to_context","title":"to_context","text":"<pre><code>to_context(\n    ctx: Context, name: str, val: TyperdriveManager\n) -&gt; None\n</code></pre>"},{"location":"reference/#typerdrive.dirs","title":"typerdrive.dirs","text":""},{"location":"reference/#typerdrive.dirs.DirInfo","title":"DirInfo  <code>dataclass</code>","text":""},{"location":"reference/#typerdrive.dirs.DirInfo.file_count","title":"file_count  <code>instance-attribute</code>","text":"<pre><code>file_count: int\n</code></pre>"},{"location":"reference/#typerdrive.dirs.DirInfo.total_size","title":"total_size  <code>instance-attribute</code>","text":"<pre><code>total_size: int\n</code></pre>"},{"location":"reference/#typerdrive.dirs.DirInfo.tree","title":"tree  <code>instance-attribute</code>","text":"<pre><code>tree: Tree\n</code></pre>"},{"location":"reference/#typerdrive.dirs.DirInfo.__init__","title":"__init__","text":"<pre><code>__init__(\n    tree: Tree, file_count: int, total_size: int\n) -&gt; None\n</code></pre>"},{"location":"reference/#typerdrive.dirs.clear_directory","title":"clear_directory","text":"<pre><code>clear_directory(path: Path) -&gt; int\n</code></pre>"},{"location":"reference/#typerdrive.dirs.is_child","title":"is_child","text":"<pre><code>is_child(path: Path, parent: Path)\n</code></pre>"},{"location":"reference/#typerdrive.dirs.render_directory","title":"render_directory","text":"<pre><code>render_directory(\n    path: Path, is_root: bool = True\n) -&gt; DirInfo\n</code></pre>"},{"location":"reference/#typerdrive.dirs.show_directory","title":"show_directory","text":"<pre><code>show_directory(path: Path, subject: str | None = None)\n</code></pre>"},{"location":"reference/#typerdrive.env","title":"typerdrive.env","text":""},{"location":"reference/#typerdrive.env.tweak_env","title":"tweak_env","text":"<pre><code>tweak_env(**kwargs: str)\n</code></pre>"},{"location":"reference/#typerdrive.exceptions","title":"typerdrive.exceptions","text":""},{"location":"reference/#typerdrive.exceptions.P","title":"P  <code>module-attribute</code>","text":"<pre><code>P = ParamSpec('P')\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.WrappedFunction","title":"WrappedFunction  <code>module-attribute</code>","text":"<pre><code>WrappedFunction = Callable[P, T]\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.BuildCommandError","title":"BuildCommandError","text":"<p>               Bases: <code>TyperdriveError</code></p>"},{"location":"reference/#typerdrive.exceptions.BuildCommandError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = INTERNAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.ContextError","title":"ContextError","text":"<p>               Bases: <code>TyperdriveError</code></p>"},{"location":"reference/#typerdrive.exceptions.ContextError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = INTERNAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.TyperdriveError","title":"TyperdriveError","text":"<p>               Bases: <code>Buzz</code></p>"},{"location":"reference/#typerdrive.exceptions.TyperdriveError.details","title":"details  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>details: Any | None = None\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.TyperdriveError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = GENERAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.TyperdriveError.footer","title":"footer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>footer: str | None = None\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.TyperdriveError.subject","title":"subject  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subject: str | None = None\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.TyperdriveError.__init__","title":"__init__","text":"<pre><code>__init__(\n    *args: Any,\n    subject: str | None = None,\n    footer: str | None = None,\n    details: Any | None = None,\n    exit_code: ExitCode | None = None,\n    **kwargs: Any,\n)\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.handle_errors","title":"handle_errors","text":"<pre><code>handle_errors(\n    base_message: str,\n    *,\n    handle_exc_class: type[Exception]\n    | tuple[type[Exception], ...] = TyperdriveError,\n    ignore_exc_class: type[Exception]\n    | tuple[type[Exception], ...]\n    | None = None,\n    do_except: Callable[[DoExceptParams], None]\n    | None = None,\n    do_else: Callable[[], None] | None = None,\n    do_finally: Callable[[], None] | None = None,\n    unwrap_message: bool = True,\n    debug: bool = False,\n) -&gt; Callable[\n    [WrappedFunction[P, T]], WrappedFunction[P, T]\n]\n</code></pre>"},{"location":"reference/#typerdrive.exceptions.log_error","title":"log_error","text":"<pre><code>log_error(params: DoExceptParams)\n</code></pre>"},{"location":"reference/#typerdrive.format","title":"typerdrive.format","text":""},{"location":"reference/#typerdrive.format.simple_message","title":"simple_message","text":"<pre><code>simple_message(\n    message: str,\n    indent: bool = False,\n    markdown: bool = False,\n    error: bool = False,\n)\n</code></pre>"},{"location":"reference/#typerdrive.format.strip_rich_style","title":"strip_rich_style","text":"<pre><code>strip_rich_style(text: str | Text) -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.format.terminal_message","title":"terminal_message","text":"<pre><code>terminal_message(\n    message: str | RenderableType,\n    subject: str | None = None,\n    subject_align: Literal[\n        \"left\", \"right\", \"center\"\n    ] = \"left\",\n    color: str = \"green\",\n    footer: str | None = None,\n    footer_align: Literal[\n        \"left\", \"right\", \"center\"\n    ] = \"left\",\n    indent: bool = True,\n    markdown: bool = False,\n    error: bool = False,\n)\n</code></pre>"},{"location":"reference/#typerdrive.types","title":"typerdrive.types","text":""},{"location":"reference/#typerdrive.types.FileCompressionSpec","title":"FileCompressionSpec  <code>module-attribute</code>","text":"<pre><code>FileCompressionSpec = str | Callable[[str], None]\n</code></pre>"},{"location":"reference/#typerdrive.types.FileRetentionSpec","title":"FileRetentionSpec  <code>module-attribute</code>","text":"<pre><code>FileRetentionSpec = (\n    str | int | timedelta | Callable[[list[str]], None]\n)\n</code></pre>"},{"location":"reference/#typerdrive.types.FileRotationSpec","title":"FileRotationSpec  <code>module-attribute</code>","text":"<pre><code>FileRotationSpec = (\n    str\n    | int\n    | timedelta\n    | time\n    | Callable[[str, TextIO], bool]\n)\n</code></pre>"},{"location":"reference/#typerdrive.version","title":"typerdrive.version","text":""},{"location":"reference/#typerdrive.version.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = get_version()\n</code></pre>"},{"location":"reference/#typerdrive.version.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.version.get_version_from_metadata","title":"get_version_from_metadata","text":"<pre><code>get_version_from_metadata() -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.version.get_version_from_pyproject","title":"get_version_from_pyproject","text":"<pre><code>get_version_from_pyproject() -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.cache.attach","title":"typerdrive.cache.attach","text":""},{"location":"reference/#typerdrive.cache.attach.ContextFunction","title":"ContextFunction  <code>module-attribute</code>","text":"<pre><code>ContextFunction = Callable[Concatenate[Context, P], T]\n</code></pre>"},{"location":"reference/#typerdrive.cache.attach.P","title":"P  <code>module-attribute</code>","text":"<pre><code>P = ParamSpec('P')\n</code></pre>"},{"location":"reference/#typerdrive.cache.attach.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"reference/#typerdrive.cache.attach.attach_cache","title":"attach_cache","text":"<pre><code>attach_cache(\n    show: bool = False,\n) -&gt; Callable[\n    [ContextFunction[P, T]], ContextFunction[P, T]\n]\n</code></pre>"},{"location":"reference/#typerdrive.cache.attach.get_cache_manager","title":"get_cache_manager","text":"<pre><code>get_cache_manager(ctx: Context) -&gt; CacheManager\n</code></pre>"},{"location":"reference/#typerdrive.cache.commands","title":"typerdrive.cache.commands","text":""},{"location":"reference/#typerdrive.cache.commands.add_cache_subcommand","title":"add_cache_subcommand","text":"<pre><code>add_cache_subcommand(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.cache.commands.add_clear","title":"add_clear","text":"<pre><code>add_clear(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.cache.commands.add_show","title":"add_show","text":"<pre><code>add_show(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.cache.commands.clear","title":"clear","text":"<pre><code>clear(\n    ctx: Context,\n    path: Annotated[\n        str | None,\n        Option(\n            help=\"Clear only the entry matching this path. If not provided, clear the entire cache\"\n        ),\n    ] = None,\n)\n</code></pre>"},{"location":"reference/#typerdrive.cache.commands.show","title":"show","text":"<pre><code>show(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.cache.exceptions","title":"typerdrive.cache.exceptions","text":""},{"location":"reference/#typerdrive.cache.exceptions.CacheClearError","title":"CacheClearError","text":"<p>               Bases: <code>CacheError</code></p>"},{"location":"reference/#typerdrive.cache.exceptions.CacheError","title":"CacheError","text":"<p>               Bases: <code>TyperdriveError</code></p>"},{"location":"reference/#typerdrive.cache.exceptions.CacheError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = GENERAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.cache.exceptions.CacheInitError","title":"CacheInitError","text":"<p>               Bases: <code>CacheError</code></p>"},{"location":"reference/#typerdrive.cache.exceptions.CacheLoadError","title":"CacheLoadError","text":"<p>               Bases: <code>CacheError</code></p>"},{"location":"reference/#typerdrive.cache.exceptions.CacheStoreError","title":"CacheStoreError","text":"<p>               Bases: <code>CacheError</code></p>"},{"location":"reference/#typerdrive.cache.manager","title":"typerdrive.cache.manager","text":""},{"location":"reference/#typerdrive.cache.manager.CacheManager","title":"CacheManager","text":""},{"location":"reference/#typerdrive.cache.manager.CacheManager.cache_dir","title":"cache_dir  <code>instance-attribute</code>","text":"<pre><code>cache_dir: Path = cache_dir\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.__init__","title":"__init__","text":"<pre><code>__init__()\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.clear_all","title":"clear_all","text":"<pre><code>clear_all() -&gt; int\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.clear_path","title":"clear_path","text":"<pre><code>clear_path(path: Path | str) -&gt; Path\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.load_bytes","title":"load_bytes","text":"<pre><code>load_bytes(path: Path | str) -&gt; bytes\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.load_json","title":"load_json","text":"<pre><code>load_json(path: Path | str) -&gt; dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.load_text","title":"load_text","text":"<pre><code>load_text(path: Path | str) -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.resolve_path","title":"resolve_path","text":"<pre><code>resolve_path(path: Path | str, mkdir: bool = False) -&gt; Path\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.store_bytes","title":"store_bytes","text":"<pre><code>store_bytes(\n    data: bytes, path: Path | str, mode: int | None = None\n)\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.store_json","title":"store_json","text":"<pre><code>store_json(\n    data: dict[str, Any],\n    path: Path | str,\n    mode: int | None = None,\n)\n</code></pre>"},{"location":"reference/#typerdrive.cache.manager.CacheManager.store_text","title":"store_text","text":"<pre><code>store_text(\n    text: str, path: Path | str, mode: int | None = None\n)\n</code></pre>"},{"location":"reference/#typerdrive.client.attach","title":"typerdrive.client.attach","text":""},{"location":"reference/#typerdrive.client.attach.ContextFunction","title":"ContextFunction  <code>module-attribute</code>","text":"<pre><code>ContextFunction = Callable[Concatenate[Context, P], T]\n</code></pre>"},{"location":"reference/#typerdrive.client.attach.P","title":"P  <code>module-attribute</code>","text":"<pre><code>P = ParamSpec('P')\n</code></pre>"},{"location":"reference/#typerdrive.client.attach.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"reference/#typerdrive.client.attach.attach_client","title":"attach_client","text":"<pre><code>attach_client(\n    **client_urls_or_settings_keys: str,\n) -&gt; Callable[\n    [ContextFunction[P, T]], ContextFunction[P, T]\n]\n</code></pre>"},{"location":"reference/#typerdrive.client.attach.get_client","title":"get_client","text":"<pre><code>get_client(ctx: Context, name: str) -&gt; TyperdriveClient\n</code></pre>"},{"location":"reference/#typerdrive.client.attach.get_client_manager","title":"get_client_manager","text":"<pre><code>get_client_manager(ctx: Context) -&gt; ClientManager\n</code></pre>"},{"location":"reference/#typerdrive.client.base","title":"typerdrive.client.base","text":""},{"location":"reference/#typerdrive.client.base.TyperdriveClient","title":"TyperdriveClient","text":"<p>               Bases: <code>Client</code></p>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.__init__","title":"__init__","text":"<pre><code>__init__(*args: Any, **kwargs: Any)\n</code></pre>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.delete_x","title":"delete_x","text":"<pre><code>delete_x(\n    url: URL | str,\n    *,\n    param_obj: BaseModel | None = None,\n    body_obj: BaseModel | None = None,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    response_model: type[RM] | None = None,\n    **request_kwargs: Any,\n) -&gt; RM | int | dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.get_x","title":"get_x","text":"<pre><code>get_x(\n    url: URL | str,\n    *,\n    param_obj: BaseModel | None = None,\n    body_obj: BaseModel | None = None,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    response_model: type[RM] | None = None,\n    **request_kwargs: Any,\n) -&gt; RM | int | dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.patch_x","title":"patch_x","text":"<pre><code>patch_x(\n    url: URL | str,\n    *,\n    param_obj: BaseModel | None = None,\n    body_obj: BaseModel | None = None,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    response_model: type[RM] | None = None,\n    **request_kwargs: Any,\n) -&gt; RM | int | dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.post_x","title":"post_x","text":"<pre><code>post_x(\n    url: URL | str,\n    *,\n    param_obj: BaseModel | None = None,\n    body_obj: BaseModel | None = None,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    response_model: type[RM] | None = None,\n    **request_kwargs: Any,\n) -&gt; RM | int | dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.put_x","title":"put_x","text":"<pre><code>put_x(\n    url: URL | str,\n    *,\n    param_obj: BaseModel | None = None,\n    body_obj: BaseModel | None = None,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    response_model: type[RM] | None = None,\n    **request_kwargs: Any,\n) -&gt; RM | int | dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.client.base.TyperdriveClient.request_x","title":"request_x","text":"<pre><code>request_x(\n    method: str,\n    url: URL | str,\n    *,\n    param_obj: BaseModel | None = None,\n    body_obj: BaseModel | None = None,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    response_model: type[RM] | None = None,\n    **request_kwargs: Any,\n) -&gt; RM | int | dict[str, Any]\n</code></pre>"},{"location":"reference/#typerdrive.client.exceptions","title":"typerdrive.client.exceptions","text":""},{"location":"reference/#typerdrive.client.exceptions.ClientError","title":"ClientError","text":"<p>               Bases: <code>TyperdriveError</code></p>"},{"location":"reference/#typerdrive.client.exceptions.ClientError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = GENERAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.client.manager","title":"typerdrive.client.manager","text":""},{"location":"reference/#typerdrive.client.manager.ClientManager","title":"ClientManager","text":""},{"location":"reference/#typerdrive.client.manager.ClientManager.clients","title":"clients  <code>instance-attribute</code>","text":"<pre><code>clients: dict[str, TyperdriveClient] = {}\n</code></pre>"},{"location":"reference/#typerdrive.client.manager.ClientManager.__init__","title":"__init__","text":"<pre><code>__init__()\n</code></pre>"},{"location":"reference/#typerdrive.client.manager.ClientManager.add_client","title":"add_client","text":"<pre><code>add_client(name: str, spec: ClientSpec) -&gt; None\n</code></pre>"},{"location":"reference/#typerdrive.client.manager.ClientManager.get_client","title":"get_client","text":"<pre><code>get_client(name: str) -&gt; TyperdriveClient\n</code></pre>"},{"location":"reference/#typerdrive.client.manager.ClientSpec","title":"ClientSpec","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/#typerdrive.client.manager.ClientSpec.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str, BeforeValidator(pyright_safe_validator)\n]\n</code></pre>"},{"location":"reference/#typerdrive.client.manager.pyright_safe_validator","title":"pyright_safe_validator","text":"<pre><code>pyright_safe_validator(value: str) -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.logging.attach","title":"typerdrive.logging.attach","text":""},{"location":"reference/#typerdrive.logging.attach.ContextFunction","title":"ContextFunction  <code>module-attribute</code>","text":"<pre><code>ContextFunction = Callable[Concatenate[Context, P], T]\n</code></pre>"},{"location":"reference/#typerdrive.logging.attach.P","title":"P  <code>module-attribute</code>","text":"<pre><code>P = ParamSpec('P')\n</code></pre>"},{"location":"reference/#typerdrive.logging.attach.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"reference/#typerdrive.logging.attach.attach_logging","title":"attach_logging","text":"<pre><code>attach_logging(\n    verbose: bool = False,\n) -&gt; Callable[\n    [ContextFunction[P, T]], ContextFunction[P, T]\n]\n</code></pre>"},{"location":"reference/#typerdrive.logging.attach.get_logging_manager","title":"get_logging_manager","text":"<pre><code>get_logging_manager(ctx: Context) -&gt; LoggingManager\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands","title":"typerdrive.logging.commands","text":""},{"location":"reference/#typerdrive.logging.commands.add_audit","title":"add_audit","text":"<pre><code>add_audit(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands.add_clear","title":"add_clear","text":"<pre><code>add_clear(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands.add_logs_subcommand","title":"add_logs_subcommand","text":"<pre><code>add_logs_subcommand(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands.add_show","title":"add_show","text":"<pre><code>add_show(cli: Typer)\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands.audit","title":"audit","text":"<pre><code>audit(ctx: Context, manager: LoggingManager)\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands.clear","title":"clear","text":"<pre><code>clear(ctx: Context, manager: LoggingManager)\n</code></pre>"},{"location":"reference/#typerdrive.logging.commands.show","title":"show","text":"<pre><code>show(ctx: Context, manager: LoggingManager)\n</code></pre>"},{"location":"reference/#typerdrive.logging.exceptions","title":"typerdrive.logging.exceptions","text":""},{"location":"reference/#typerdrive.logging.exceptions.LoggingError","title":"LoggingError","text":"<p>               Bases: <code>TyperdriveError</code></p>"},{"location":"reference/#typerdrive.logging.exceptions.LoggingError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = GENERAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.logging.manager","title":"typerdrive.logging.manager","text":""},{"location":"reference/#typerdrive.logging.manager.LoggingManager","title":"LoggingManager","text":""},{"location":"reference/#typerdrive.logging.manager.LoggingManager.log_dir","title":"log_dir  <code>instance-attribute</code>","text":"<pre><code>log_dir: Path = log_dir\n</code></pre>"},{"location":"reference/#typerdrive.logging.manager.LoggingManager.log_file","title":"log_file  <code>instance-attribute</code>","text":"<pre><code>log_file: Path = log_dir / log_file_name\n</code></pre>"},{"location":"reference/#typerdrive.logging.manager.LoggingManager.__init__","title":"__init__","text":"<pre><code>__init__(*, verbose: bool = False)\n</code></pre>"},{"location":"reference/#typerdrive.logging.manager.LoggingManager.audit","title":"audit","text":"<pre><code>audit()\n</code></pre>"},{"location":"reference/#typerdrive.logging.manager.LoggingManager.clear","title":"clear","text":"<pre><code>clear()\n</code></pre>"},{"location":"reference/#typerdrive.logging.manager.LoggingManager.show","title":"show","text":"<pre><code>show()\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach","title":"typerdrive.settings.attach","text":""},{"location":"reference/#typerdrive.settings.attach.ContextFunction","title":"ContextFunction  <code>module-attribute</code>","text":"<pre><code>ContextFunction = Callable[Concatenate[Context, P], T]\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach.P","title":"P  <code>module-attribute</code>","text":"<pre><code>P = ParamSpec('P')\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach.attach_settings","title":"attach_settings","text":"<pre><code>attach_settings(\n    settings_model: type[BaseModel],\n    *,\n    validation: Validation = Validation.BEFORE,\n    persist: bool = False,\n    show: bool = False,\n) -&gt; Callable[\n    [ContextFunction[P, T]], ContextFunction[P, T]\n]\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach.get_settings","title":"get_settings","text":"<pre><code>get_settings(ctx: Context, type_hint: type[ST]) -&gt; ST\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach.get_settings_manager","title":"get_settings_manager","text":"<pre><code>get_settings_manager(ctx: Context) -&gt; SettingsManager\n</code></pre>"},{"location":"reference/#typerdrive.settings.attach.get_settings_value","title":"get_settings_value","text":"<pre><code>get_settings_value(ctx: Context, settings_key: str) -&gt; Any\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands","title":"typerdrive.settings.commands","text":""},{"location":"reference/#typerdrive.settings.commands.add_bind","title":"add_bind","text":"<pre><code>add_bind(cli: Typer, settings_model: type[BaseModel])\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.add_reset","title":"add_reset","text":"<pre><code>add_reset(cli: Typer, settings_model: type[BaseModel])\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.add_settings_subcommand","title":"add_settings_subcommand","text":"<pre><code>add_settings_subcommand(\n    cli: Typer, settings_model: type[BaseModel]\n)\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.add_show","title":"add_show","text":"<pre><code>add_show(cli: Typer, settings_model: type[BaseModel])\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.add_unset","title":"add_unset","text":"<pre><code>add_unset(cli: Typer, settings_model: type[BaseModel])\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.add_update","title":"add_update","text":"<pre><code>add_update(cli: Typer, settings_model: type[BaseModel])\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.bind","title":"bind","text":"<pre><code>bind(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.reset","title":"reset","text":"<pre><code>reset(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.show","title":"show","text":"<pre><code>show(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.unset","title":"unset","text":"<pre><code>unset(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.settings.commands.update","title":"update","text":"<pre><code>update(ctx: Context)\n</code></pre>"},{"location":"reference/#typerdrive.settings.exceptions","title":"typerdrive.settings.exceptions","text":""},{"location":"reference/#typerdrive.settings.exceptions.SettingsError","title":"SettingsError","text":"<p>               Bases: <code>TyperdriveError</code></p>"},{"location":"reference/#typerdrive.settings.exceptions.SettingsError.exit_code","title":"exit_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exit_code: ExitCode = GENERAL_ERROR\n</code></pre>"},{"location":"reference/#typerdrive.settings.exceptions.SettingsInitError","title":"SettingsInitError","text":"<p>               Bases: <code>SettingsError</code></p>"},{"location":"reference/#typerdrive.settings.exceptions.SettingsResetError","title":"SettingsResetError","text":"<p>               Bases: <code>SettingsError</code></p>"},{"location":"reference/#typerdrive.settings.exceptions.SettingsSaveError","title":"SettingsSaveError","text":"<p>               Bases: <code>SettingsError</code></p>"},{"location":"reference/#typerdrive.settings.exceptions.SettingsUnsetError","title":"SettingsUnsetError","text":"<p>               Bases: <code>SettingsError</code></p>"},{"location":"reference/#typerdrive.settings.exceptions.SettingsUpdateError","title":"SettingsUpdateError","text":"<p>               Bases: <code>SettingsError</code></p>"},{"location":"reference/#typerdrive.settings.manager","title":"typerdrive.settings.manager","text":""},{"location":"reference/#typerdrive.settings.manager.SettingsManager","title":"SettingsManager","text":""},{"location":"reference/#typerdrive.settings.manager.SettingsManager.invalid_warnings","title":"invalid_warnings  <code>instance-attribute</code>","text":"<pre><code>invalid_warnings: dict[str, str] = {}\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.settings_instance","title":"settings_instance  <code>instance-attribute</code>","text":"<pre><code>settings_instance: BaseModel = settings_model(\n    **settings_values\n)\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.settings_model","title":"settings_model  <code>instance-attribute</code>","text":"<pre><code>settings_model: type[BaseModel] = settings_model\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.settings_path","title":"settings_path  <code>instance-attribute</code>","text":"<pre><code>settings_path: Path = settings_path\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.__init__","title":"__init__","text":"<pre><code>__init__(settings_model: type[BaseModel])\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.pretty","title":"pretty","text":"<pre><code>pretty(with_style: bool = True) -&gt; str\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.reset","title":"reset","text":"<pre><code>reset()\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.save","title":"save","text":"<pre><code>save()\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.set_warnings","title":"set_warnings","text":"<pre><code>set_warnings(err: ValidationError)\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.unset","title":"unset","text":"<pre><code>unset(*unset_keys: str)\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.update","title":"update","text":"<pre><code>update(**settings_values: Any)\n</code></pre>"},{"location":"reference/#typerdrive.settings.manager.SettingsManager.validate","title":"validate","text":"<pre><code>validate()\n</code></pre>"},{"location":"features/cache/","title":"Commands to manage application cache","text":"<p>Because basic <code>Typer</code> apps are essentially stateless, there isn't a good way to temporarily store data. A cache can be useful when you want to keep data between sessions, but the functionality of your app isn't dependent on the data staying there. Auth tokens are a great example of this. If your app authenticates against an identity provider, you probably don't want to have to login every time you run a command in your app.</p> <p>A cache allows you to store your tokens between commands. Because you can always get new tokens by logging in again, they fit well with the ephemeral nature of a cache.</p> <p>To provide this functionality, <code>typerdrive</code> provides a cache manager and the <code>cache</code> subcommand to manage your app's cache.</p>"},{"location":"features/cache/#overview","title":"Overview","text":"<p>The <code>typerdrive</code> package provides the functionality to store, retrieve, and clear three types of data:</p> <ul> <li>binary data</li> <li>text data</li> <li>json data</li> </ul> <p>To gain access to your cache, you can retrieve the <code>CacheManager</code> that is bound to the user context through the use of the <code>@attach_cache</code> decorator by providing an argument to your command with the <code>CacheManager</code> type.</p> <p>The type is important!</p> <p>The type for you \"manager\" argument must be <code>CacehManager</code>, or Typer will throw an error!</p> <p>You can also view your cache at any time and clear one or all of the data in it through <code>cache</code> subcommands.</p>"},{"location":"features/cache/#usage","title":"Usage","text":"<p>It's useful to start with a code example to see the cache in action:</p> <pre><code>from random import choice\n\nimport typer\nfrom rich import print\nfrom rich.panel import Panel\nfrom snick import unwrap\nfrom typerdrive import CacheError, CacheManager, add_cache_subcommand, attach_cache, set_typerdrive_config\nfrom typerdrive.env import tweak_env\n\ncli = typer.Typer()\nadd_cache_subcommand(cli)\nset_typerdrive_config(app_name=\"cache-commands-example\")\n\nspeeches = dict(\n    yoda=unwrap(\n        \"\"\"\n        Size matters not. Look at me. Judge me by my size, do you? Hmm? Hmm. And well you should not. For my ally is the\n        Force, and a powerful ally it is. Life creates it, makes it grow. Its energy surrounds us and binds us. Luminous\n        beings are we, not this crude matter. You must feel the Force around you; here, between you, me, the tree, the\n        rock, everywhere, yes. Even between the land and the ship.\n        \"\"\"\n    ),\n    leia=unwrap(\n        \"\"\"\n        General Kenobi. Years ago you served my father in the Clone Wars. Now he begs you to help him in his struggle\n        against the Empire. I regret that I am unable to present my father's request to you in person, but my ship has\n        fallen under attack, and now I'm afraid my mission to bring you to Alderaan has failed.  I have placed\n        information vital of the survival of the Rebellion into the memory systems of this R2 unit.My father will know\n        how to retrieve it. You must see this droid safely delivered to him on Alderaan. This is our most desperate\n        hour. Help me, Obi-Wan Kenobi. You're my only hope.\n        \"\"\"\n    ),\n    han=unwrap(\n        \"\"\"\n        Kid, I've flown from one side of this galaxy to the other; I've seen a lot of strange stuff. But I've never seen\n        anything to make me believe that there's one all-powerful Force controlling everything. There's no mystical\n        energy field that controls my destiny. Anyway, it's all a lot of simple tricks and nonsense.\n        \"\"\"\n    ),\n)\n\n\n@cli.command()\n@attach_cache()\ndef report(ctx: typer.Context, manager: CacheManager):  # pyright: ignore[reportUnusedParameter]\n    speaker = choice(list(speeches.keys()))\n    path = f\"{speaker}/speech.txt\"\n    used_cache = False\n    text: str\n    try:\n        text = manager.load_text(path)\n    except CacheError:\n        print(f\"[red]Cache miss![/red] Loading text for {speaker}\")\n        text = speeches[speaker]\n    else:\n        print(f\"[green]Cache hit![/green] Loaded text from cache target [yellow]{path}[/yellow]\")\n        used_cache = True\n\n    with tweak_env(COLUMNS=\"80\"):\n        print(Panel(text))\n\n    if not used_cache:\n        manager.store_text(text, path)\n        print(f\"Stored text at cache target [yellow]{path}[/yellow]\")\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>In this toy example, some text is stored in the cache to be used for future executions of the <code>report</code> command.</p> <p>If the data isn't in the cache yet, it's \"loaded\". The data is printed and then stored in the cache for future use:</p> <pre><code>$ python examples/cache/commands.py report\nCache miss! Loading text...\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Size matters not. Look at me. Judge me by my size, do you? Hmm? Hmm. And     \u2502\n\u2502 well you should not. For my ally is the Force, and a powerful ally it is.    \u2502\n\u2502 Life creates it, makes it grow. Its energy surrounds us and binds us.        \u2502\n\u2502 Luminous beings are we, not this crude matter. You must feel the Force       \u2502\n\u2502 around you; here, between you, me, the tree, the rock, everywhere, yes. Even \u2502\n\u2502 between the land and the ship.                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStored text at cache target yoda/speech.txt\n</code></pre> <p>When you run the command again, the data is retrieved from the cache instead:</p> <pre><code>$ python examples/cache/commands.py report\nCache hit! Loaded text from cache target yoda/speech.txt\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Size matters not. Look at me. Judge me by my size, do you? Hmm? Hmm. And     \u2502\n\u2502 well you should not. For my ally is the Force, and a powerful ally it is.    \u2502\n\u2502 Life creates it, makes it grow. Its energy surrounds us and binds us.        \u2502\n\u2502 Luminous beings are we, not this crude matter. You must feel the Force       \u2502\n\u2502 around you; here, between you, me, the tree, the rock, everywhere, yes. Even \u2502\n\u2502 between the land and the ship.                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>This time, the data was found in the cache so it was loaded from there.</p> <p>Running the command a few more times will eventually store all the speeches in the cache. Now, you can view the cache if to see what has been saved in it:</p> <pre><code>$ python examples/cache/commands.py cache show\n\u256d\u2500 Current cache \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 \ud83d\udcc2 /home/dusktreader/.cache/commands.py                                      \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc2 han                                                                   \u2502\n\u2502 \u2502   \u2514\u2500\u2500 \ud83d\udcc4 speech.txt (313 Bytes)                                            \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc2 leia                                                                  \u2502\n\u2502 \u2502   \u2514\u2500\u2500 \ud83d\udcc4 speech.txt (594 Bytes)                                            \u2502\n\u2502 \u2514\u2500\u2500 \ud83d\udcc2 yoda                                                                  \u2502\n\u2502     \u2514\u2500\u2500 \ud83d\udcc4 speech.txt (395 Bytes)                                            \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Storing 1.3 kB in 3 files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Let's say that we only want to remove a single item from the cache. We can do that using the <code>clear</code> command with a path for the cache item. In this case, let's remove yoda's speech:</p> <pre><code>$ python examples/cache/commands.py cache clear --path=yoda/speech.txt\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   Cleared entry at cache target yoda/speech.txt                              \u2502\n\u2502                                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Let's view the cache again to verify that the file was removed:</p> <pre><code>$ python examples/cache/commands.py cache show\n\n\u256d\u2500 Current cache \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 \ud83d\udcc2 /home/dusktreader/.cache/commands.py                                      \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc2 han                                                                   \u2502\n\u2502 \u2502   \u2514\u2500\u2500 \ud83d\udcc4 speech.txt (313 Bytes)                                            \u2502\n\u2502 \u2514\u2500\u2500 \ud83d\udcc2 leia                                                                  \u2502\n\u2502     \u2514\u2500\u2500 \ud83d\udcc4 speech.txt (594 Bytes)                                            \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Storing 907 Bytes in 2 files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Great! Now, we could go through and clean the remaining files up one at a time. But, the <code>clear</code> command will empty the whole cache out if you run it without a specific path:</p> <pre><code>$ python examples/cache/commands.py cache clear\nAre you sure you want to clear the entire cache? [y/N]: y\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   Cleared all 2 files from cache                                             \u2502\n\u2502                                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Note that you have to confirm whenever you request to clear the entire cache to prevent accidental deletion.</p>"},{"location":"features/cache/#details","title":"Details","text":"<p>Let's take a closer look at the details of each <code>cache</code> subcommand and the methods of the <code>CacheManager</code>:</p>"},{"location":"features/cache/#cache-sub-commands","title":"<code>cache</code> sub-commands","text":"<p>The <code>cache</code> command provides two sub-commands to manage the cache.</p>"},{"location":"features/cache/#clear","title":"<code>clear</code>","text":"<p>The <code>clear</code> command gives you the ability to remove items from the cache. You can target a specific entry in the cache by passing it a specific path using the <code>--path</code> option. If the item is not found in the cache at that location, an error will be raised. If it is found, the item will be deleted.</p> <p>If no path is provided to the <code>clear</code> command, then the entire cache will be cleared out. You are required to confirm your action to make sure that mistakes are not made.</p> <p>The help text from the <code>clear</code> command looks like this:</p> <pre><code>$ python examples/cache/commands.py cache clear --help\n\n Usage: commands.py cache clear [OPTIONS]\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --path        TEXT  Clear only the entry matching this path. If not provided,\u2502\n\u2502                     clear the entire cache [default: None]                   \u2502\n\u2502 --help              Show this message and exit.                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"features/cache/#show","title":"<code>show</code>","text":"<p>The <code>show</code> command just shows the current state of the cache. It will show the entire tree structure of the data stored in the cache and a report about how big the cache is and how many files are stored in it.</p>"},{"location":"features/cache/#the-get_cache_manager-function","title":"The <code>get_cache_manager()</code> function","text":"<p>The <code>attach</code> submodule of <code>typerdrive.cache</code> provides a <code>get_cache_manager()</code> function. If you want to avoid the magic of using a parameter to your command with the <code>CacheManager</code> type, you can get access to the <code>CacheManager</code> instance from the <code>typer.Context</code> using the <code>get_cache_manager()</code> function instead.</p>"},{"location":"features/cache/#cachemanager-methods","title":"<code>CacheManager</code> methods","text":"<p>The <code>CacheManager</code> provides several methods for interacting with the cache.</p>"},{"location":"features/cache/#cachemanagerresolve_path","title":"<code>CacheManager.resolve_path()</code>","text":"<p>This method converts a cache target path like <code>yoda/speech.txt</code> into the absolute path to the file where the data is stored. It does several checks to make sure that the file exists and that the resolved path is actually within the cache directory (to prevent sneaky use of <code>..</code>).</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerstore_bytes","title":"<code>CacheManager.store_bytes()</code>","text":"<p>This method stores binary data in a cache target. An optional <code>mode</code> keyword argument can be provided to control the permissions of the cache entry. So, for example, if you want only your user to be able to read and write to the entry, you might use a <code>mode</code> of <code>0o600</code>.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerstore_text","title":"<code>CacheManager.store_text()</code>","text":"<p>This method stores text data in a cache target. It can also be given a <code>mode</code> parameter.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerstore_json","title":"<code>CacheManager.store_json()</code>","text":"<p>This method stores a dictionary of data in a cache target. The dictionary must be JSON serializable or an error will be thrown. The JSON written to the file is formatted to be human readable. This method can also be provided a <code>mode</code> parameter.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerload_bytes","title":"<code>CacheManager.load_bytes()</code>","text":"<p>This method loads binary data from a cache target. If the cache target does not exist, an error will be thrown.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerload_text","title":"<code>CacheManager.load_text()</code>","text":"<p>This method loads text data from a cache target. If the cache target does not exist, an error will be thrown.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerload_json","title":"<code>CacheManager.load_json()</code>","text":"<p>This method loads a JSON serialized dictionary from a cache target. If the cache target does not exist, an error will be thrown. If the data at the cache target cannot be serialized, an error will be thrown.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerclear_path","title":"<code>CacheManager.clear_path()</code>","text":"<p>This method removes an entry from the cache at the provided target. If the target does not exist, an error will be thrown. If the parent directory of the entry is empty after it is removed, the parent directory will be removed as well.</p> <p>Method Reference</p>"},{"location":"features/cache/#cachemanagerclear_all","title":"<code>CacheManager.clear_all()</code>","text":"<p>This method will remove all items from the cache.</p> <p>Method Reference</p>"},{"location":"features/client/","title":"API Clients with some special modifications","text":"<p>More sophisticated CLI applications often need to talk to one or more remote APIs. To help you with that, <code>typerdrive</code> includes a client that can be attached to any command using the <code>@attach_client()</code>. The client can load its configuration from the settings if they are attached.</p> <p>Additionally, the client provided by <code>typerdrive</code> has some specialized features called the <code>*_x()</code> methods that provide some useful scaffolding around the standard <code>httpx</code> query functions.</p>"},{"location":"features/client/#overview","title":"Overview","text":"<p>The <code>typerdrive</code> package provides the <code>@attach_client()</code> decorator that allows you to access instances of <code>TyperdriveClient</code> as arguments to your command function. The <code>TyperdriveClient</code> inherits from <code>httpx.Client</code> and adds the following enhancements through the <code>*_x()</code> methods:</p> <ul> <li>Ability to specify the query parameters as a <code>pydantic</code> model instance</li> <li>Ability to specify the request body as a <code>pydantic</code> model instance</li> <li>Ability to provide an expected status (an exception will be raised if it does not match)</li> <li>Ability to provide a <code>pydantic</code> model class to deserialize the response into</li> </ul> <p>The <code>@attach_client()</code> decorator also makes it easy to initialize the instances of the <code>TyperdriveClient</code> using values from your settings model provided through <code>@attach_settings()</code>.</p>"},{"location":"features/client/#usage","title":"Usage","text":"<p>Let's look at a code example to see how the <code>@attach_client()</code> decorator and <code>TyperdriveClient</code> can be used:</p> <pre><code>from typing import Annotated\n\nimport typer\nfrom pydantic import BaseModel\nfrom typerdrive import (\n    TyperdriveClient,\n    attach_client,\n    attach_settings,\n    handle_errors,\n    set_typerdrive_config,\n    terminal_message,\n)\n\n\nclass SettingsModel(BaseModel):\n    people_url: str = \"https://swapi.info/api/people\"\n    planets_url: str = \"https://swapi.info/api/planets\"\n\n\nclass PeopleResponse(BaseModel, extra=\"ignore\"):\n    name: str\n    height: int\n    birth_year: str\n    gender: str\n\n\nclass PlanetResponse(BaseModel, extra=\"ignore\"):\n    name: str\n    climate: str\n    terrain: str\n    gravity: str\n    population: int\n\n\ncli = typer.Typer()\nset_typerdrive_config(app_name=\"cache-commands-example\")\n\n\n@cli.command()\n@handle_errors(\"Lookup on SWAPI failed!\")\n@attach_settings(SettingsModel)\n@attach_client(people=\"people_url\", planets=\"planets_url\")\ndef report(\n    ctx: typer.Context,  # pyright: ignore[reportUnusedParameter]\n    people: TyperdriveClient,\n    planets: TyperdriveClient,\n    person_id: Annotated[int, typer.Option(help=\"The ID of the person to look up\")] = 1,\n    planet_id: Annotated[int, typer.Option(help=\"The ID of the planet to look up\")] = 1,\n):\n    terminal_message(\n        str(people.get_x(f\"{person_id}\", expected_status=200, response_model=PeopleResponse)),\n        subject=f\"Person {person_id}\",\n        footer=f\"Fetched from {people.base_url}{person_id}\",\n    )\n    terminal_message(\n        str(planets.get_x(f\"{planet_id}\", expected_status=200, response_model=PlanetResponse)),\n        subject=f\"Planet {planet_id}\",\n        footer=f\"Fetched from {planets.base_url}{planet_id}\",\n    )\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>In this example, we are attaching two separate clients that both connect to the Star Wars API (SWAPI). Both clients utilize a base url provided in the settings. Finally, both clients are accessed in the command function body by providing a <code>TyperdriveClient</code> argument with a name that matches the keyword arguments in <code>@attach_client()</code>.</p> <p>When we run the example, the two clients will load some data from the API and show it on the screen:</p> <pre><code>$ python examples/client/attach.py\n\n\u256d\u2500 Person 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   name='Luke Skywalker' height=172 birth_year='19BBY' gender='male'          \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Fetched from https://swapi.info/api/people/1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Planet 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   name='Tatooine' climate='arid' terrain='desert' gravity='1 standard'       \u2502\n\u2502   population=200000                                                          \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Fetched from https://swapi.info/api/planets/1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>As you can see, because client requests included a <code>response_model</code> keyword argument, the returned data was automatically deserialized into the provided <code>pydantic</code> model.</p> <p>The client also provides error checking that can work hand-in-hand with the <code>@handle_errors()</code> decorator so that if the request provides the wrong response code, response data type, or incorrectly formatted data you can have a helpful error message provided to your users:</p> <pre><code>$ python examples/client/attach.py --person-id=9000\n\n\u256d\u2500 Lookup on SWAPI failed! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   Got an unexpected status code: Expected 200, got 404 -- Not Found          \u2502\n\u2502                                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>In this case, we attempted to fetch a person that doesn't exist on <code>SWAPI</code>, consequently, the server returned a <code>404: Not Found</code> response. Since our request specified that a 200 was to be expected, an error was raised. That error was neatly handled by the <code>@handle_errors()</code> decorator and presented nicely to the user.</p>"},{"location":"features/client/#details","title":"Details","text":"<p>There are some important details to know about with the <code>TyperdriveClient</code> and the <code>@attach_client()</code> decorator that we'll go over now.</p>"},{"location":"features/client/#typerdriveclient","title":"<code>TyperdriveClient</code>","text":"<p>The <code>TyperdriveClient</code> is a very thin layer over the top of a normal <code>httpx.Client</code> instance. However, the <code>*_x()</code> methods provide a lot of extra functionality that, in my experience, are very nice to have when working with APIs in a CLI app.</p> <p>Let's go over the methods.</p>"},{"location":"features/client/#typerdriveclient__init__","title":"<code>TyperdriveClient.__init__()</code>","text":"<p>There is only one additional keyword argument added that the base <code>httpx.Client</code> doesn't have. It's the <code>log_func</code> parameter. If provided, the <code>TyperdriveClient</code> will use this function to log its behavior as it's processing a request. This is very useful for debugging issues with the requests.</p> <p>This parameter can be any function that acts on a string, but usually you would use a method from a <code>logging.Logger</code>, just the builtin <code>print</code> function, or (as I usually prefer) a <code>loguru.Logger</code> method. If it is not provided, the <code>TyperdriveClient</code> will use a builtin logger named <code>typerdrive.client</code> and log all its messages at a <code>DEBUG</code> level.</p> <p>Method Reference</p>"},{"location":"features/client/#typerdriveclientrequest_x","title":"<code>TyperdriveClient.request_x()</code>","text":"<p>This is the beating heart of the <code>TyperdriveClient</code>. The function will issue a request using <code>httpx.Client.request()</code>, but it provides a lot of functionality that is controlled by it's keyword arguments.</p> <p>The <code>TyperdriveClient</code> accepts all the same args and kwargs as it's parent <code>httpx.Client</code> (and passes them along at init time), but also accepts additional kwargs.</p> <p>Method Reference</p>"},{"location":"features/client/#param_obj","title":"<code>param_obj</code>","text":"<p>If provided, this should be an instance of a <code>pydantic</code> model. It will be deserialized into a dictionary that will be used for the request URL parameters. Suppose that a <code>GET</code> endpoint in your API supports query params <code>page</code>, <code>page_size</code>, <code>sort</code>, and <code>search</code>. You could use a pydantic model to describe the params like this:</p> <pre><code>class Params(BaseModel):\n    page: int = 0\n    page_size: int = 10\n    sort: bool = False\n    search: str = \"\"\n</code></pre> <p>and use an instance of it in your request:</p> <pre><code>client = TyperdriveClient()\nclient.request_x(\"GET\", \"/cities/mos-eisley\", param_obj=Params(sort=True, search=\"droids\"))\n</code></pre> <p>If user input is going to be used to drive the url parameters, using a <code>pydantic</code> model provides a very convenient validation mechanism.</p>"},{"location":"features/client/#body_obj","title":"<code>body_obj</code>","text":"<p>Like the <code>param_obj</code>, the <code>body_obj</code> parameter allows you to use an instance of a <code>pydantic</code> model to describe the body of the request that will be sent. Let's suppose now, that you have a <code>POST</code> endpoint that requires a specific format of data to create a new entity. You can use <code>pydantic</code> to structure and validate the data and let the <code>TyperdriveClient</code> correctly deserialize the data for its request.</p> <p>Suppose the endpoint needs a JSON structure like this in the <code>POST</code> request:</p> <pre><code>{\n  \"external\": {\n    \"casing\": \"durasteel\",\n    \"buttons\": 1\n  },\n  \"internal\": {\n    \"kyber_crystal\": \"green\",\n    \"emitter_shape\": \"cup\"\n  }\n}\n</code></pre> <p>Then, you might have <code>pydantic</code> models set up like this:</p> <pre><code>class ExternalParts(BaseModel):\n    casing: str = \"steel\"\n    buttons: int = 1\n\nclass InternalParts(BaseModel):\n    kyber_crystal: Color\n    emitter_shape: \"cup\"\n\nclass Lightsaber(BaseModel):\n    internal: InternalParts\n    external: ExternalParts\n</code></pre> <p>Finally, we could make our request using <code>request_x()</code> like this:</p> <pre><code>lightsaber_3 = Lightsaber(\n    internal=InternalParts(kyber_crystal=GREEN),\n    external=ExternalParts(casing=\"durasteel\"),\n)\nclient.request_x(\"POST\", \"/lightsaber\", body_obj=lightsaber_3)\n</code></pre>"},{"location":"features/client/#expected_status","title":"<code>expected_status</code>","text":"<p>If this parameter is provided, then the return status code from the request will be compared against this value. If it does not match, an exception will be raised.</p>"},{"location":"features/client/#expect_response","title":"<code>expect_response</code>","text":"<p>This flag indicates whether or not the request is expected to return a response. By default, the <code>request_x()</code> method expects to receive a JSON response from the server. If you know that the endpoint you are calling doesn't return a response, then you can pass <code>expect_response=False</code>, and the <code>request_x()</code> method will return the status code from the request only:</p> <pre><code>client.request_x(\"DELETE\", \"/death-star/tractor-beam\", expect_response=False)\n</code></pre>"},{"location":"features/client/#response_model","title":"<code>response_model</code>","text":"<p>This is probably the most useful feature of the <code>TyperdriveClient</code>. If you provide a <code>pydantic</code> model class with the <code>response_model</code> parameter, then the <code>request_x()</code> method will deserialize the response into an instance of that model. If deserialization fails, an exception will be raised explaining what went wrong.</p> <p>Consider an API endpoint that returns a payload like this:</p> <pre><code>{\n    \"total_amount\": 17000,\n    \"up_front\": 2000,\n    \"on_delivery\": 15000,\n    \"extras\": \"safe delivery\"\n}\n</code></pre> <p>We could create a model describing what we expect to receive from the API and use it in the request:</p> <pre><code>class TransportAgreement(BaseModel):\n   total_amount: int\n   up_front: int\n   on_delivery: int\n   extras: str | None\n\nclient.request_x(\"POST\", \"/smuggler\", response_model=TransportAgreement)\n</code></pre>"},{"location":"features/client/#typerdriveclientget_x","title":"<code>TyperdriveClient.get_x()</code>","text":"<p>This method simply calls <code>request_x()</code> with a fixed method of <code>GET</code>.</p> <p>Method Reference</p>"},{"location":"features/client/#typerdriveclientpost_x","title":"<code>TyperdriveClient.post_x()</code>","text":"<p>This method simply calls <code>request_x()</code> with a fixed method of <code>POST</code>.</p> <p>Method Reference</p>"},{"location":"features/client/#typerdriveclientput_x","title":"<code>TyperdriveClient.put_x()</code>","text":"<p>This method simply calls <code>request_x()</code> with a fixed method of <code>PUT</code>.</p> <p>Method Reference</p>"},{"location":"features/client/#typerdriveclientpatch_x","title":"<code>TyperdriveClient.patch_x()</code>","text":"<p>This method simply calls <code>request_x()</code> with a fixed method of <code>PATCH</code>.</p> <p>Method Reference</p>"},{"location":"features/client/#typerdriveclientdelete_x","title":"<code>TyperdriveClient.delete_x()</code>","text":"<p>This method simply calls <code>request_x()</code> with a fixed method of <code>DELETE</code>.</p> <p>Method Reference</p>"},{"location":"features/client/#attach_client","title":"<code>attach_client()</code>","text":"<p>The <code>attach_client()</code> decorator is used to bind instances of <code>TyperdriveClient</code> to the command context. It instantiates the client instances.</p> <p>It does this by mapping the keyword arguments (besides <code>log_func</code>) to new client instances.</p> <p>The keyword argument name will be the name of the newly created client. The value of the keyword argument is used to provide a <code>base_url</code> for the new client. The <code>attach_client()</code> decorator will first try to match the value with a settings value if the settings are attached to the context. If it can't find a matching settings value, then it will use the value itself as a <code>base_url</code>.</p> <p>Consider this example:</p> <pre><code>class SettingsModel(BaseModel):\n    people_api: str = \"https://swapi.info/api/people\"\n\ncli = typer.Typer()\n\n@cli.command()\n@attach_settings(SettingsModel)\n@attach_client(people=\"people_api\")\ndef report(ctx: typer.Context, people: TyperdriveClient):\n    ...\n</code></pre> <p>Here, the settings contain a value \"people_api\" that matches the value of the keyword argument. Thus, a new <code>TyperdriveClient</code> instance named \"people\" is created and bound to the context. Because we provided a parameter named <code>people</code> to the <code>report()</code> function, the new client will be available in the function body as a variable named <code>people</code>.</p> <p>Let's look at a different example:</p> <pre><code>class SettingsModel(BaseModel):\n    people_api: str = \"https://swapi.info/api/people\"\n\ncli = typer.Typer()\n\n@cli.command()\n@attach_settings(SettingsModel)\n@attach_client(planets=\"https://swapi.info/api/planets\")\ndef report(ctx: typer.Context, planets: TyperdriveClient):\n    ...\n</code></pre> <p>Because the value of the keyword argument to <code>@attach_client()</code> doesn't match any settings, the value will be used as the <code>base_url</code> for the \"planets\" client in the function body.</p> <p>Finally, let's look at one more example:</p> <pre><code>cli = typer.Typer()\n\n@cli.command()\n@handle_errors(\"Lookup on SWAPI failed!\")\n@attach_client(planets=\"planets_api\")\ndef report(ctx: typer.Context, planets: TyperdriveClient):\n    ...\n</code></pre> <p>In this case, we don't have a settings object bound. On its own, that won't be a problem. However, because no settings value can be matched to \"planets_api\", that value would be used for a <code>base_url</code>. Since \"planets_api\" is not a valid http/https URL, however, an exception will be raised:</p> <pre><code>\u256d\u2500 Lookup on SWAPI failed! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   Couldn't use base_url='planets_url' for client. If using a settings key,   \u2502\n\u2502   make sure settings are attached.                                           \u2502\n\u2502                                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Finally, it should be noted that if you pass a <code>log_func</code> value to the <code>@attach_client()</code> decorator, this will be passed to each client instance to use to log its work.</p> <p>Function Reference</p>"},{"location":"features/exceptions/","title":"User-friendly Error Handling","text":"<p>By default, <code>Typer</code> doesn't produce user-friendly errors. It does use <code>rich</code> to add some style to the exceptions out of the box. But, without any other error handling, your users will be confronted with a stack-trace and exception message that might be very difficult for them to interpret.</p>"},{"location":"features/exceptions/#overview","title":"Overview","text":"<p>The <code>typerdrive</code> package provides a convenient way to handle errors within your Typer app. Instead of slapping your users with a big stack-trace, <code>typerdrive</code> presents errors in a clean and friendly presentation so users can better understand what went wrong.</p> <pre><code>\u256d\u2500 Login Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   Couldn't log you in to https://wretched-hive-of-scum-and-villainy.com      \u2502                                                      \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 If the problem persists, please contact tech support \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>You can customize what errors are handled, which are ignored, and even add tasks that should be run by the error handler.</p> <p>The implementation of the <code>@handle_errors()</code> decorator was heavily influenced by the implementation of the <code>handle_errors()</code> context manager from the <code>py-buzz</code> package, and so it uses a lot of the same patterns.</p> <p>The <code>TyperdriveError</code> (and subclasses) provided in <code>typerdrive</code> is a subclass of the <code>Buzz</code> class from <code>py-buzz</code>. If you want to learn more about how to use <code>Buzz</code> classes, please checkout the linked documentation for <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#usage","title":"Usage","text":"<p>Let's start out by looking at an example that uses the <code>@handle_errors()</code> decorator:</p> <p>This one's more complicated!</p> <p>This example is a bit more complicated because there's more setup needed to show the full breadth of the <code>@handle_errors()</code> decorator. The meat of the command function starts on line 49.</p> <pre><code>import random\nimport traceback\nfrom enum import StrEnum, auto\n\nimport typer\nfrom buzz import DoExceptParams\nfrom loguru import logger\nfrom typerdrive import TyperdriveError, handle_errors, strip_rich_style, terminal_message\n\n\nclass CallIt(StrEnum):\n    heads = auto()\n    tails = auto()\n\n\ndef log_error(params: DoExceptParams):\n    logger.error(\n        \"\\n\".join(\n            [\n                strip_rich_style(params.final_message),\n                \"--------\",\n                \"Traceback:\",\n                \"\".join(traceback.format_tb(params.trace)),\n            ]\n        )\n    )\n\n\ndef log_success():\n    logger.info(\"No errors occurred!\")\n\n\ndef log_done():\n    logger.info(\"Program complete. Exiting.\")\n\n\ncli = typer.Typer()\n\n\n@cli.command()\n@handle_errors(\n    \"Flip error\",\n    do_except=log_error,\n    do_else=log_success,\n    do_finally=log_done,\n)\ndef flip(call_it: CallIt, show_logs: bool = False):\n    logger.disable(__name__)\n    if show_logs:\n        logger.enable(__name__)\n        logger.info(\"Logging enabled\")\n    result = random.choice([c for c in CallIt])\n    logger.debug(f\"Result: {result}\")\n    if call_it != result:\n        raise TyperdriveError(\n            f\"[yellow]{result}[/yellow], [red]you lose![/red]\",\n            subject=\"Womp, womp\",\n            footer=\"Don't sweat it; just try again!\",\n        )\n    terminal_message(\n        f\"[yellow]{result}[/yellow], [green]you win![/green]\",\n        subject=\"Tada!\",\n        footer=\"Maybe you won't be so lucky next time!\",\n    )\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>This example command simulates a coin flip where an exception is raised any time the outcome of the coin flip doesn't match the user's guess. This provides a nice way to see how the error handling works with a single command.</p> <p>Let's try it out:</p> <pre><code>$ python examples/exceptions/handle_errors.py tails\n\n\u256d\u2500 Tada! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   tails, you win!                                                            \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Maybe you won't be so lucky next time! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Ok, so on my first try, I guessed correctly, and a message was displayed for to tell me I won.</p> <p>Great, let's try again and see what happens:</p> <pre><code>$ python examples/exceptions/handle_errors.py tails\n\n\u256d\u2500 Womp, womp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   heads, you lose!                                                           \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Don't sweat it; just try again! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>So this time I lost, and again a message is showt to let me know. However, this time the function doesn't explicitly print the message. Instead, it raises a <code>TyperdriveError</code> which is handled by the <code>@handle_errors()</code> decorator instead.</p> <p>No stack trace is shown to the user and the message that is displayed has none of the trappings of an exception message. Instead, it's clear and simple so the user will understand what is going on.</p> <p>The great power of this error handling is that a <code>TyperdriveError</code> that is raised in any code that is called by the command function will also be caught and presented nicely to the user.</p> <p>Next, let's try the command with the <code>--show-logs</code> option that is available:</p> <pre><code>$ python examples/exceptions/handle_errors.py tails --show-logs\n2025-04-25 17:48:54,680: DEBUG -&gt; Result: tails\n\n\u256d\u2500 Tada! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   tails, you win!                                                            \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Maybe you won't be so lucky next time! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n2025-04-25 17:48:54,682: INFO -&gt; No errors occurred!\n2025-04-25 17:48:54,682: INFO -&gt; Program complete. Exiting.\n</code></pre> <p>I won again this time, but this time I get to see the app's logs. Notice that in the function body, there is only one logging statement to log the result. However, we have passed three parameters to the <code>@handle_errors()</code> decorator that each log some data.</p> <p>Because I won, only the functions provided with the  <code>do_else</code> and <code>do_finally</code> options are actually called. Both of these functions take no parameters and simply log a message. Regardless of whether an exception was raised or not, any provided <code>do_finally</code> function will be called after the command function returns. The <code>do_else</code> option will only be triggered if no exceptions were raised in the function body.</p> <p>Let's try another flip:</p> <pre><code>$ python examples/exceptions/handle_errors.py tails --show-logs\n2025-04-25 17:52:37,977: DEBUG -&gt; Result: heads\n2025-04-25 17:52:37,978: ERROR -&gt; Flip error -- TyperdriveError: heads, you lose!\n--------\nTraceback:\n  File \"/home/dusktreader/git-repos/personal/typerdrive/src/typerdrive/exceptions.py\", line 69, in wrapper\n    return_value = func(*args, **kwargs)\n  File \"/home/dusktreader/git-repos/personal/typerdrive/examples/exceptions/handle_errors.py\", line 62, in flip\n    raise TyperdriveError(\n    ...&lt;3 lines&gt;...\n    )\n\n\n\u256d\u2500 Womp, womp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   heads, you lose!                                                           \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Don't sweat it; just try again! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n2025-04-25 17:52:37,980: INFO -&gt; Program complete. Exiting.\n</code></pre> <p>This time I lost again, and a lot more information was logged. The <code>do_except</code> function is triggered whenever an exception is handled by the <code>@handle_errors()</code> decorator. The function is passed a special argument which is an instance of the <code>DoExceptParams</code> data class provided by the <code>py-buzz</code> package. This argument carries with it some detailed information about the handled error. In this case, our <code>log_error()</code> function uses the stack trace contained in the param to show a traceback of the handled error in the logs.</p> <p>All three of the <code>do_.*</code> parameters are useful, but the <code>do_except</code> parameter is the most powerful because you can do some post-processing on the error any time one is handled.</p> <p>It's worth pointing out here that this example doesn't tell the <code>@handle_errors()</code> decorator what kind of exceptions it should handle. By default, <code>@handle_errors()</code> will only handle instances of <code>TyperdriveError</code> or one of its descendants. If you want to handle a different exception type (or any of its descendants), you can provide it in the <code>handle_exc_class</code> keyword argument. If, for instance, you wanted the handler to catch any and all errors that might be raised in the command function, you could pass <code>handle_exc_class=Exception</code> to the decorator.</p>"},{"location":"features/exceptions/#details","title":"Details","text":"<p>Now, let's dive a little deeper into the details of the <code>@handle_errors()</code> decorator.</p>"},{"location":"features/exceptions/#base_message","title":"<code>base_message</code>","text":"<p>This is the <code>base_message</code> that will be included with the final message that is passed in the <code>DoExceptParams</code> that are passed to the <code>do_except</code> function. This base message can be overridden by setting the <code>subject</code> on a <code>TyperdriveError</code> (or exception class derived from it. When the error message is displayed for the user, the <code>base_message</code> is the text that is used for the \"subject\" (also known as \"title\") of the panel that the exception's message will be displayed inside of. This parameter is required.</p> <p>This parameter is an analog of the <code>base_message</code> parameter used in the <code>handle_errors()</code> context manager from <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#handle_exc_class","title":"<code>handle_exc_class</code>","text":"<p>This keyword argument identifies the exception type that will be handled by the <code>@handle_errors()</code> decorator. Any exception that is an instance of this type or an instance of any class that inherits from it will be handled. By default, this kwarg is set to <code>TyperdriveError</code> exception class. It is also possible to provide a <code>tuple</code> of exception types that should be handled by the decorator.</p> <p>This parameter is an analog of the <code>handle_exc_class</code> parameter used in the <code>handle_errors()</code> context manager from <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#ignore_exc_class","title":"<code>ignore_exc_class</code>","text":"<p>This kwarg is only useful when combined with <code>handle_exc_class</code>. It identifies an exception type that should not be handled by the <code>@handle_errors()</code> decorator even if it is a subclass of the exception type passed to <code>handle_exc_class</code>. This is useful to selectively omit specific exception types from handling. This is particularly important if you set <code>handle_exc_class=Exception</code> and you still need to let certain exception types escape. Like <code>handle_exc_class</code>, this can be passed a <code>tuple</code> of exception types each of which will be ignored.</p> <p>This parameter is an analog of the <code>ignore_exc_class</code> parameter used in the <code>handle_errors()</code> context manager from <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#do_except","title":"<code>do_except</code>","text":"<p>This keyword argument provides a function that will be called anytime an exception is handled by the <code>@handle_errors()</code> decorator. The function provided in this kwarg must take exactly one argument of type <code>DoExceptParams</code>. <code>DoExceptParams</code> is a dataclass that carries specific information about the handled error including:</p> <ul> <li><code>err</code>: The exception itself</li> <li><code>base_message</code>: As described above</li> <li><code>final_message</code>: A formatted string that include the exception name, <code>base_message</code>, and <code>err</code> message.</li> <li><code>trace</code>: A traceback of the error</li> </ul> <p>The <code>do_except</code> kwarg is most useful for providing a function that will log details about the error without overwhelming your user with this information.</p> <p>This parameter is an analog of the <code>do_except</code> parameter used in the <code>handle_errors()</code> context manager from <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#do_else","title":"<code>do_else</code>","text":"<p>This kwarg provides a function that will be called only if no (unhandled) exceptions were raised in the command function body. This function can take no arguments. It is not nearly as powerful as the <code>do_except</code> argument, it may be useful to carry out some task that should only happen if no errors were encountered.</p> <p>This parameter is an analog of the <code>do_else</code> parameter used in the <code>handle_errors()</code> context manager from <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#do_finally","title":"<code>do_finally</code>","text":"<p>This keyword argument provides a function that will be called no matter what happens in the command function's body. It does not matter if an exception was raised or not, this function will be called after the command function returns. Again, this kwarg is not as powerful as the <code>do_except</code> option. But it can have its uses, especially when you need to do some cleanup after the command completes.</p> <p>This parameter is an analog of the <code>do_finally</code> parameter used in the <code>handle_errors()</code> context manager from <code>py-buzz</code>.</p>"},{"location":"features/exceptions/#unwrap_message","title":"<code>unwrap_message</code>","text":"<p>By default, the <code>@handle_errors()</code> decorator will unwrap the message that is passed to it. That is, it will first dedent the message then join all the lines together. This is useful because a longer message is often passed in the form of a triple-quoted text block that is optimized for viewing the code. However, we don't know how wide the user's monitor will be. Thus, it's better to let <code>rich</code> do the wrapping for us.</p> <p>However, sometimes the error message has a particular structure to it with indents and newlines. This is the case with <code>Pydantic</code> validation errors. In this case, we don't want the message unwrapped to a single line. If you set the <code>unwrap_message</code> kwarg to <code>False</code> the error will be printed as-is.</p>"},{"location":"features/exceptions/#debug","title":"<code>debug</code>","text":"<p>By default, the <code>@handle_errors()</code> decorator will use only the <code>base_message</code> from a <code>TyperdriveError</code> (or any other <code>Buzz</code> exception). The <code>base_message</code> will have additional information if it was produced from a <code>handle_errors()</code> or <code>check_expressions()</code> context manager from <code>py-buzz</code>. The extended <code>message</code> in the exception may contain information that you don't want to show to your end user. If you want the full message to be displayed in the CLI, then set the <code>debug</code> flag to <code>True</code>.</p>"},{"location":"features/logging/","title":"Managed logging with Loguru","text":"<p>Once your CLI has any degree of sophisitcation, you will probably want to include logging. Additionally, it may be important to keep the logging output in a file (in a reasonable location). It is also important to be able to check the logs, and remembering the reasonable location where the log file is locate can be tricky.</p> <p>While the logging from the standard library is fairly good, I find that the <code>loguru</code> logging package is so much nicer to work with. So, I built loguru along with some other nice helpers into <code>typerdrive</code> to let you focus on building out the business logic of your CLI.</p>"},{"location":"features/logging/#overview","title":"Overview","text":"<p>The <code>typerdrive</code> package provides the <code>@attach_logging()</code> decorator to enable logging for the decorated command. It will enable logging for the <code>typerdrive</code> internals and capture the logs in rotated log files. Additionally, if you include the <code>verbose=True</code> flag in the <code>@attach_logging()</code> decorator, then the logs will also be printed to <code>stdout</code>.</p> <p>In addition to the <code>@attach_logging()</code> decorator, <code>typerdrive</code> also includes three commands for viewing, auditing, and clearing your logs.</p>"},{"location":"features/logging/#usage","title":"Usage","text":"<p>Again, let's look at a code example to see how the <code>@attach_client()</code> decorator can be used:</p> <pre><code>import typer\nfrom loguru import logger\nfrom typerdrive import LoggingManager, attach_logging, set_typerdrive_config\nfrom typerdrive.logging.commands import add_logs_subcommand\n\ncli = typer.Typer()\nadd_logs_subcommand(cli)\nset_typerdrive_config(app_name=\"logging-attach-example\")\n\n\n@cli.command()\n@attach_logging(verbose=True)\ndef report(ctx: typer.Context, manager: LoggingManager, clear: bool = False, count: int = 10):  # pyright: ignore[reportUnusedParameter]\n    logger.info(\"Starting report\")\n    for i in range(count):\n        logger.info(f\"Logging message {i + 1}\")\n    logger.info(\"Completing report\")\n\n    logger.info(\"Showing log\")\n    manager.show()\n\n    logger.info(\"Auditing log directory\")\n    manager.audit()\n\n    if clear:\n        logger.info(\"Clearing the log directory\")\n        manager.clear()\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>In this example, we are simply looping some number of times and logging in each iteration. Once the loop is finished, you will be shown the log file in a pager and, after you close that, a view of the contents of the log directory. The final output from the function will look like this:</p> <pre><code>$ python examples/logging/attach.py report\n15:55:39 | DEBUG | Logging attached to typer context\n15:55:39 | INFO | Starting report\n15:55:39 | INFO | Logging message 1\n15:55:39 | INFO | Logging message 2\n15:55:39 | INFO | Logging message 3\n15:55:39 | INFO | Logging message 4\n15:55:39 | INFO | Logging message 5\n15:55:39 | INFO | Logging message 6\n15:55:39 | INFO | Logging message 7\n15:55:39 | INFO | Logging message 8\n15:55:39 | INFO | Logging message 9\n15:55:39 | INFO | Logging message 10\n15:55:39 | INFO | Completing report\n15:55:39 | INFO | Showing log\n15:55:42 | INFO | Auditing log directory\n\n\u256d\u2500 Current log files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 \ud83d\udcc2 /home/dusktreader/.local/share/logging-attach-example/logs                \u2502\n\u2502 \u2514\u2500\u2500 \ud83d\udcc4 app.log (1.2 kB)                                                      \u2502\n\u2502                                                                              \u2502\n\u2570\u2500 Storing 1.2 kB in 1 files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"features/logging/#details","title":"Details","text":"<p>Let's take a closer look at the logging functionality available with <code>typerdrive</code>.</p>"},{"location":"features/logging/#logs-sub-commands","title":"<code>logs</code> sub-commands","text":"<p>The <code>logs</code> sub-commands can be enabled in your Typer CLI by calling the <code>add_logs_subcommand()</code>. This will enable the following:</p>"},{"location":"features/logging/#show","title":"<code>show</code>","text":"<p>The <code>show</code> command opens the current log file in a pager for you to peruse. Your system's pager will be used. Usually you can exit the pager by using the \"q\" key.</p>"},{"location":"features/logging/#audit","title":"<code>audit</code>","text":"<p>The <code>audit</code> command shows the current state of the directory where the logs are stored. It will show the entire tree structure of the directory and some information about how much data is being stored and how many files there are.</p>"},{"location":"features/logging/#attach_logging-decorator","title":"<code>@attach_logging()</code> decorator","text":"<p>Logging in <code>typerdrive</code> is enabled for a command function through the use of the <code>@attach_logging()</code> decorator. There is one optional argument available: <code>verbose</code>. If this flag is set, then all log lines of <code>DEBUG</code> and above will also be printed to stdout. This should probably only be used for debugging issues in the application as it could potentially bombard your user with a lot of finished.</p>"},{"location":"features/logging/#configuration","title":"Configuration","text":"<p>By default, the log file will be rotated after one week, and log files older than one month will be deleted. Both of these things are configurable using <code>typerdrive.config.set_typerdrive_config()</code>.</p>"},{"location":"features/logging/#log_file_rotation","title":"<code>log_file_rotation</code>","text":"<p>You can control how the log files are rotated using this key. It accepts the same values as the <code>rotation</code> parameter used by <code>loguru.logger.add()</code>. By default, the files are rotated after one week.</p>"},{"location":"features/logging/#log_file_retention","title":"<code>log_file_retention</code>","text":"<p>You can control how the log files are kept using this key. It accepts the same values as the <code>retention</code> parameter used by <code>loguru.logger.add()</code>. By default, the files are deleted after one month.</p>"},{"location":"features/logging/#log_file_compression","title":"<code>log_file_compression</code>","text":"<p>You can control how the log files are compressed upon rotation using this key. It accepts the same values as the <code>compression</code> parameter used by <code>loguru.logger.add()</code>. By default, the files are compressed to <code>tar.gz</code> files.</p>"},{"location":"features/logging/#log_file_name","title":"<code>log_file_name</code>","text":"<p>You can control the name of th log file using this key. By default, it will use \"app.log\".</p>"},{"location":"features/settings/","title":"Commands to manage application settings","text":"<p>Typical applications built with <code>Typer</code> are essentially stateless. That is, to control their behavior, you need to provide all of the configuration for the app through the use of positional arguments, options, and environment variables.</p> <p>For a complex application with many commands, this can be frustrating and slow. You find yourself passing the same parameters over and over.</p> <p>Thus, <code>typerdrive</code> provides a <code>settings</code> subcommand to help with this.</p>"},{"location":"features/settings/#overview","title":"Overview","text":"<p>The <code>typerdrive</code> package provides functionality to store, reuse, and update application settings through a set of subcommands. These subcommands are bound to your app under the <code>settings</code> subcommand. These subcommands manipulate the your app's settings and allow your other commands to access the settings values via the <code>@attach_settings</code> decorator.</p> <p>Let's take a look at how we can use this powerful feature set.</p>"},{"location":"features/settings/#usage","title":"Usage","text":"<p>Let's start by looking at a code example:</p> <pre><code>from typing import Annotated\n\nimport typer\nfrom pydantic import AfterValidator, BaseModel\nfrom snick import unwrap\nfrom typerdrive import add_settings_subcommand, attach_settings, set_typerdrive_config\n\n\ndef valid_alignment(value: str) -&gt; str:\n    if value not in [\"good\", \"neutral\", \"evil\"]:\n        raise ValueError(f\"{value} is an invalid alignment\")\n    return value\n\n\nclass SettingsModel(BaseModel):\n    name: str\n    planet: str\n    is_humanoid: bool = True\n    alignment: Annotated[str, AfterValidator(valid_alignment)] = \"neutral\"\n\n\ncli = typer.Typer()\nadd_settings_subcommand(cli, SettingsModel)\nset_typerdrive_config(app_name=\"settings-attach-example\")\n\n\n@cli.command()\n@attach_settings(SettingsModel)\ndef report(ctx: typer.Context, cfg: SettingsModel):\n    print(\n        unwrap(\n            f\"\"\"\n            Look at this {cfg.alignment} {cfg.name} from {cfg.planet}\n            {\"walking\" if cfg.is_humanoid else \"slithering\"} by.\n            \"\"\"\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>In this example, the app provides a Pydantic model that describes all of the settings values that the app needs. Then, the app calls the <code>add_settings_subcommand()</code> to add the <code>settings</code> feature to the CLI. That's all you need to utilize the <code>settings</code> feature in your app. Now, you can access and manage your settings through the various <code>settings</code> subcommands.</p> <p>In the <code>report</code> command, you can see how the settings values may be accessed within one of the app's other commands. The <code>@attach_settings</code> decorator adds the settings object to the app's <code>typer.Context</code>. Then, the settings can be accessed by providing a parameter to the command that matches the <code>SettingsModel</code> type. The argument that will get the settings object can be named anything you like!</p> <p>Settings model type agreement</p> <p>The type of the pydantic model passed to <code>@attach_settings()</code> MUST match the type used for the settings parameter of the command function. If the types do not match, a <code>Typer</code> exception will be raised saying that Typer doesn't know how to handle the argument.</p> <p>Great, now let's try a few commands in this app to see how the settings commands work.</p> <p>First, we will just show the config</p> <pre><code>$ python examples/settings/commands.py settings show\n\n\u256d\u2500 Current settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                             \u2502\n\u2502   is-humanoid -&gt; True                                                                       \u2502\n\u2502     alignment -&gt; neutral                                                                    \u2502\n\u2502                                                                                             \u2502\n\u2502   Configuration is invalid:                                                                 \u2502\n\u2502          name -&gt; Field required                                                             \u2502\n\u2502        planet -&gt; Field required                                                             \u2502\n\u2502                                                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>As you can see, our settings initially just matches the defaults provided in the settings model.  The fields that still need to be defined are clearly identified and the settings are shown to be invalid.</p> <p>Next, let's make the settings valid by setting the missing values with <code>bind</code>:</p> <pre><code>\u256d\u2500 Current settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                             \u2502\n\u2502          name -&gt; jawa                                                                       \u2502\n\u2502        planet -&gt; tatooine                                                                   \u2502\n\u2502   is-humanoid -&gt; True                                                                       \u2502\n\u2502     alignment -&gt; neutral                                                                    \u2502\n\u2502                                                                                             \u2502\n\u2570\u2500 saved to /home/dusktreader/.local/share/commands.py/settings.json \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Now, the settings are valid. You can also see that the settings were saved to disk for your app to use in future commands.</p> <p>Let's make an adjustment to the settings using the <code>update</code> command:</p> <pre><code>$ python examples/settings/commands.py settings update --name=hutt --no-is-humanoid\n\n\u256d\u2500 Current settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                             \u2502\n\u2502          name -&gt; hutt                                                                       \u2502\n\u2502        planet -&gt; tatooine                                                                   \u2502\n\u2502   is-humanoid -&gt; False                                                                      \u2502\n\u2502     alignment -&gt; neutral                                                                    \u2502\n\u2502                                                                                             \u2502\n\u2570\u2500 saved to /home/dusktreader/.local/share/commands.py/settings.json \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Notice that the <code>update</code> command only changed the values specified and left the others alone.</p> <p>Now that we're happy with our settings, lets run our <code>report</code> command to try out using these app settings:</p> <pre><code>$ python examples/settings/commands.py report\nLook at this neutral hutt from tatooine slithering by.\n</code></pre> <p>Great! Our app is able to use the settings in any command!</p> <p>Finally, let's clear out the settings with <code>reset</code>:</p> <pre><code>\u256d\u2500 Current settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                             \u2502\n\u2502   is-humanoid -&gt; True                                                                       \u2502\n\u2502     alignment -&gt; neutral                                                                    \u2502\n\u2502                                                                                             \u2502\n\u2502   Configuration is invalid:                                                                 \u2502\n\u2502          name -&gt; Field required                                                             \u2502\n\u2502        planet -&gt; Field required                                                             \u2502\n\u2502                                                                                             \u2502\n\u2570\u2500 saved to /home/dusktreader/.local/share/commands.py/settings.json \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Now, all the settings are returned to their initial values. Those that have no default values are now invalid.</p>"},{"location":"features/settings/#details","title":"Details","text":"<p>Let's take a closer look at details of each <code>settings</code> subcommand.</p>"},{"location":"features/settings/#bind","title":"<code>bind</code>","text":"<p>The <code>bind</code> command is used to set all your app settings at once. It is very similar to the <code>update</code> command with a few key differences. First, the <code>bind</code> command will not allow you to have an invalid configuration when it is done. It will require each settings value without a default to be explicitly set. After you have provided the values through command options, the final configuration will be validated before it is saved.</p> <p>Like the other <code>settings</code> subcommands that modify the settings, <code>bind</code> will write a settings file to disk when it is finished. The settings file is stored in <code>~/.local/share/&lt;your-app-name&gt;/settings.json</code>. If the parent directories for this file don't exist, they will be created.</p> <p>Not supported on Windows</p> <p>Currently, the <code>typerdrive</code> <code>settings</code> commands are only configured to work on Linux and MacOS. I have plans to add support for Windows as well eventually, but at the moment <code>typerdrive</code> is dependent on settings being stored below <code>~/.local/share</code></p> <p>Each settings value from the settings model you provide is mapped to a CLI option for the <code>bind</code> subcommand. If the value has a default in the model, then the option will use the same default. Boolean values use the normal convention from Typer with <code>--flag</code> or <code>--no-flag</code> controlling the value of the boolean.</p> <p>The help text from our example above for the <code>bind</code> subcommand looks like this:</p> <pre><code>$ python examples/settings/commands.py settings bind --help\n\n Usage: commands.py settings bind [OPTIONS]\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --name                               TEXT  [default: None] [required]                                                                                                                                                                                                                \u2502\n\u2502 *  --planet                             TEXT  [default: None] [required]                                                                                                                                                                                                                \u2502\n\u2502    --is-humanoid    --no-is-humanoid          [default: is-humanoid]                                                                                                                                                                                                                    \u2502\n\u2502    --alignment                          TEXT  [default: neutral]                                                                                                                                                                                                                        \u2502\n\u2502    --help                                     Show this message and exit.                                                                                                                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"features/settings/#update","title":"<code>update</code>","text":"<p>The <code>update</code> command is used to update a subset of the available settings values. It works very similarly to the <code>bind</code> command, however, the <code>update</code> command will allow your configuration to be invalid when it is finished. This might be useful if you want to establish some values in your settings now but need to look something up before you are finished configuring the app.</p> <p>Like the other subcommands that modify settings, <code>update</code> will save all changes to disk.</p> <p>Each settings value from the settings model is mapped to an optional CLI option for the <code>update</code> subcommand. If the settings value is a boolean, it will use the <code>--flag</code> / <code>--no-flag</code> format. All other commands will default to <code>None</code> if they are not passed and the <code>update</code> command will ignore them.</p> <p>The help text from our example above for the <code>update</code> subcommand looks like this:</p> <pre><code>$ python examples/settings/commands.py settings update --help\n\n Usage: commands.py settings update [OPTIONS]\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --name                               TEXT  [default: None]                                                                                                                                                                                                                              \u2502\n\u2502 --planet                             TEXT  [default: None]                                                                                                                                                                                                                              \u2502\n\u2502 --is-humanoid    --no-is-humanoid          [default: is-humanoid]                                                                                                                                                                                                                       \u2502\n\u2502 --alignment                          TEXT  [default: None]                                                                                                                                                                                                                              \u2502\n\u2502 --help                                     Show this message and exit.                                                                                                                                                                                                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Notice how now all the options have a default.</p>"},{"location":"features/settings/#unset","title":"<code>unset</code>","text":"<p>The <code>unset</code> command is used to return a settings value to its initial state. If the value has a default, it will be set to that value. If it does not have a default, it will simply be removed. Like the <code>update</code> subcommand, <code>unset</code> allows the settings to be in invalid state.</p> <p>Each settings value from the settings model is mapped to a CLI option that <code>takes no value</code>. If you supply the option, then the corresponding setting value will be unset.</p> <p>The help text from our example above for the <code>unset</code> subcommand looks like this:</p> <pre><code>$ python examples/settings/commands.py settings unset --help\n\n Usage: commands.py settings unset [OPTIONS]\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --name                                                                                                                                                                                                                                                                                  \u2502\n\u2502 --planet                                                                                                                                                                                                                                                                                \u2502\n\u2502 --is-humanoid                                                                                                                                                                                                                                                                           \u2502\n\u2502 --alignment                                                                                                                                                                                                                                                                             \u2502\n\u2502 --help                 Show this message and exit.                                                                                                                                                                                                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"features/settings/#show","title":"<code>show</code>","text":"<p>The <code>show</code> command just shows the current value of the settings. That's it!</p>"},{"location":"features/settings/#reset","title":"<code>reset</code>","text":"<p>The <code>reset</code> command returns all settings values to their initial state. It allows the settings to be in an invalid state when it is finished. It will also show the new settings values when it is done. The <code>reset</code> subcommand takes no arguments.</p>"},{"location":"features/settings/#the-get_settings-functions","title":"The <code>get_settings()</code> functions","text":"<p>In order for <code>typerdrive</code> to provide the settings through an argument to the command function, we have to tap into a bit of Python and Typer's \"mystical energy field\". If you want to use something more direct, you can access the settings object using the <code>get_settings()</code> function to extract it from the <code>typer.Context</code> instead. Rewriting the <code>report()</code> command to use the <code>get_settings()</code> function would look like this:</p> <pre><code>@cli.command()\n@attach_settings(SettingsModel)\ndef report(ctx: typer.Context):\n    cfg = get_settings(ctx, SettingsModel)\n    print(\n        unwrap(\n            f\"\"\"\n            Look at this {cfg.alignment} {cfg.name} from {cfg.planet}\n            {'walking' if cfg.is_humanoid else 'slithering'} by.\n            \"\"\"\n        )\n    )\n</code></pre> <p>The <code>type_hint</code> argument to <code>get_settings()</code></p> <p>Because the model is bound to the settings commands dynamically, the <code>get_settings()</code> function needs a type hint to cast it to the appropriate model type. This <code>type_hint</code> argument must match with the settings model that was attached or an exception will be raised.</p>"},{"location":"features/settings/#the-add_-functions","title":"The <code>add_.*()</code> functions","text":"<p>The <code>typerdrive.settings.commands</code> module has several <code>add_.*()</code> functions. These work by adding a subcommand to the CLI app that is passed in. In general, you only need to use the <code>add_settings_subcommand()</code> in your app. However, if you want to customize where the settings subcommands appear, you may call the other <code>add_.*()</code> functions directly</p>"},{"location":"features/settings/#add_bind","title":"<code>add_bind()</code>","text":"<p>This method adds the <code>bind</code> subcommand to the provided CLI app. It uses the <code>build_command()</code> function to dynamically create a command and then adds it to the <code>cli</code> argument.</p> <p>Function Reference</p>"},{"location":"features/settings/#add_update","title":"<code>add_update()</code>","text":"<p>This method adds the <code>update</code> subcommand to the provided CLI app. It uses the <code>build_command()</code> function to dynamically create a command and then adds it to the <code>cli</code> argument.</p> <p>Function Reference</p>"},{"location":"features/settings/#add_unset","title":"<code>add_unset()</code>","text":"<p>This method adds the <code>unset</code> subcommand to the provided CLI app. It uses the <code>build_command()</code> function to dynamically create a command and then adds it to the <code>cli</code> argument.</p> <p>Function Reference</p>"},{"location":"features/settings/#add_show","title":"<code>add_show()</code>","text":"<p>This method adds the <code>show</code> subcommand to the provided CLI app. It uses the <code>build_command()</code> function to dynamically create a command and then adds it to the <code>cli</code> argument.</p> <p>Function Reference</p>"},{"location":"features/settings/#add_reset","title":"<code>add_reset()</code>","text":"<p>This method adds the <code>reset</code> subcommand to the provided CLI app. It uses the <code>build_command()</code> function to dynamically create a command and then adds it to the <code>cli</code> argument.</p> <p>Function Reference</p>"},{"location":"features/settings/#add_settings_subcommand","title":"<code>add_settings_subcommand()</code>","text":"<p>This method does three things:</p> <ul> <li>Creates a new Typer app</li> <li>Adds all the settings subcommands to the new app</li> <li>Adds the new app as a subcommand of the Typer CLI that you provide</li> </ul> <p>The result is that all the subcommands are available under one <code>settings</code> subcommand.</p> <p>Function Reference</p>"}]}